https://www.infoworld.com/article/3710250/how-to-write-reusable-java-code.html


코드 규칙 정의: 팀과 함께 코드 표준을 정의하여 코드가 빠르게 혼란스러워지는 것을 방지. 코드 명명, 클래스 및 메소드 라인 수량, 예외 처리, 패키지 구조, 프로그래밍 언어 및 버전, 프레임워크, 도구 및 라이브러리, 코드 테스트 표준, 코드 레이어 등을 포함.


API 문서화: 서비스를 API로 노출할 때 API를 문서화하여 새로운 개발자가 이해하고 사용하기 쉽게 함. 중복 API 메소드 생성을 방지.


표준 코드 명명 규칙 준수: 간단하고 설명적인 코드 이름을 사용하여 코드의 가독성을 높임. 예를 들어, Java의 경우 JavaBeans 명명 규칙을 따름.


응집력 있는 클래스와 메소드 작성: 각 클래스와 메소드가 하나의 기능을 잘 수행하도록 함. 이는 코드의 명확성과 유지 관리 용이성을 향상.


클래스 분리: 코드가 너무 많은 의존성을 가지지 않도록 함. 높은 결합도는 유지 관리를 어렵게 만듬.


SOLID 원칙 유지: 객체 지향 프로그래밍의 다섯 가지 설계 원칙을 따름. 이 원칙들은 소프트웨어 시스템을 더 유지 관리 가능하고, 유연하며, 쉽게 이해할 수 있도록 도와줌.


적용 가능한 경우 디자인 패턴 사용: 디자인 패턴은 코드 재사용에 도움이 됨. 올바른 상황에서 디자인 패턴을 적용하면 코드를 더 유연하게 확장할 수 있음.


바퀴를 다시 발명하지 않기: 이미 존재하는 해결책을 재사용하여 시간과 노력을 절약.
