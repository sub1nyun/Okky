세션 1: 좋은 개발자로 성장하려면 (발표자 : 박종천)
소프트웨어 엔지니어
STEM: 과학, 기술, 공학, 수학이 소프트웨어 엔지니어의 기본
하나의 언어를 10년, 20년 후에도 사용할 확률은 매우 낮다.
무언가를 다음을 위해 바탕이 될 수 있도록 공부하고 깊게 학습해본다.
무엇을 갖추어야 할까? -> 개발에 대한 기본 지식                
수학, 물리, 프로그래밍 언어, 데이터 구조, 알고리즘(디자인 패턴), 운영체제, 하드웨어 등         
새로운 것을 배우는 능력          
Critical Thinking -> 요구사항에만 집중하는 것이 아닌 전체적으로 앞 뒤 맥락을 고려해 보는 것
예를 들어 에어컨을 켜라고 했을 때, 왜 켜야하는지? 온도는 어떠한지? 왜 에어컨을 켜야하는지? 다른 방법은 없는 지? 등등의 다양한 방법에 대해 항상 고민해볼 것
새로운 언어를 학습한다면 기존에 사용하는 언어와는 왜 다른지? 무엇이 다른지? 왜 이렇게 만들었을까? 등등
업무가 주어진다면 이 업무는 왜 해야하는지? 업무를 하면 무엇이 좋아지는지? 다른 방법은 없는지? 등 최대한 상상의 시나리오를 펼쳐볼 것
큰 그림 - U자형 인재
하나는 깊게 파고 나머지를 골고루 아는 인재
여러 블로그들을 보면서 다양한 시야를 넓히자.
어떻게 해야 성공할까? -> 재능, 노력, 기회  
같은 프로그램을 여러 번 작성해 보기  
Make It Working(동작하도록)
Make It Right(정확하게)
Make It Fast(최적화)
재능도 있고 노력도 하고있다면 기회는 반드시, 반드시 온다.
역량이 없는데 성공한다면 자신의 역량이 뛰어나다고 판단할 수 있기에 오히려 더 위험하다.
역량이 있는데 실패한다면 더 많이 배우고, 회고하고, 그 이후로는 잘 될 확률이 더 높다.
역량은 세 가지라고 생각
지식 - 공부(책, 사람)
기술 - 훈련(업무)
경험 - 성공과 실패(간접 경험)
사람은 실패를 통해 더 많이 배운다.
사람은 간접 경험이 95%로 직접 경험에 비해 훨씬 더 많다.
여러 글, 세미나,영상, 블로그 들을 꾸준히 보며 많이 배우자.
소프트 스킬
추후의 역량은 소프트 스킬에서 구별이 된다.
 

개발자가 알아야 하는 9가지 기술
엔지니어링 역량
개발에 대한 기본 지식
제품에 대한 이해
개발 주기
매니지먼트 역량
프로젝트 관리
팀 관리
프로세스 관리
비즈니스 역량
인사 시스템
사업 관리
비전과 조직 문화
인사 시스템

채용, 평가, 직급, 보상, 교육, 복지
외부에 매력적으로 홍보
입사자들의 성장 - Develop
업무에 몰입 - Engage
DEVOCEAN과 같은 외부 활동, 세미나 등이 굉장히 중요하다고 생각함
평가 - 소프트웨어 엔지니어

생산성 - Productivity
책임감 - Professionalism
협업 - Teamwork
지식 - Knowledge
안정성 - Functionality
좋은 코드 - Implementation
설계 - Design & Architecture
위의 모든 것을 잘해야 하고, 부족한 부분은 채워가자.
위 요소 중 아쉬운 점을 스스로 찾고, 주변에 롤 모델을 찾고 물어보자.
목표 - 계획 - 행동 - 측정(Goal, Plan, Action, Mesaure)
 

직급 - 커리어 패스

신입 - 배우는 입장
초급 - 주어진 일을 잘 함
중급 - 일을 찾아서 알아서 잘 함
고급 - 다른 사람들을 위한 일을 정리 > 제품 기획, 프로젝트 관리, 기술 영업 등
리드 - 압도적인 지식이나 성과
실장 - 여러 프로젝트들에 책임
개발임원 - 사업
 

교육

책, 컨퍼런스, 세미나, 사이드 프로젝트, 멘토링, 강의 등
성장 - 개인 발전 계획
단기 목표(1, 3, 5년)
성장하고 싶은 항목들
성장을 위한 활동들
성장을 위해 필요한 리소스
관리자에게 도움을 요청하자
일대일 면담 - 면담을 통해 많이 발전한다
여러분의 보스가 여러분의 성장에 관심이 많아야 한다.
당신은 일하면서 행복한가? -> 관리자로서 제가 무엇을 도울 수 있을지?
당신은 일하면서 성장하는가? -> 관리자로서 제가 무엇을 도울 수 있을지?
당신의 업무는 잘 진행되는가?, 당신의 장기적인 비전과 목표는 무엇인가? 등등
성장의 규칙
가능성 vs 역량 : 역량의 80% 수준을 지속적으로 사용하라
작게, 일찍, 자주 실패하라
안전한 실패로 사람들의 도전을 가능하게 하자
개인은 실패하더라도 프로젝트는 성공하게 이끌자
 

시간 관리(시간 관리의 세 가지 원칙)

시간 관리 - 사용(Spend), 낭비(Waste), 투자(Invest)
커리어 첫 10년 - 20 : 0 : 80(사용 : 낭비 : 투자)
중간 10년 - 50 : 10 : 40
최종 10년 - 40 : 30 : 30
첫 10년간 매우 많은 시간을 투자해야 이후 커리어가 수월해진다.
짧고 굵게 역량을 향상시키자.
 

Q&A)
개발자가 가져야 하는 가치를 하나만 꼽아주신다면?
소통 : 다른 분야에 대해 어느정도 지식을 쌓고 경험을 쌓아야 생존할 수 있다. 꼭 시도 해라!
우리는 어떤 개발자를 좋은 개발자라고 할 수 있을까요?
채용을 할 때 다음 세 가지를 본다. 똑똑한가? 부지런한가? 착한가?
똑똑한가? -> 새로운 것을 빨리 배울 수 있다.
부지런한가? -> 생산성
착한가? -> 잘못 뽑으면 조직이 난리날 수 있다. (선한의지 중요)
개발자로 소프트 스킬을 향상하기 위한 팁이 있을까요?
다른 사람과 부딪혀야 소프트 스킬이 향상되고, 소프트 스킬이 향상되어야 같이 일할 수 있다.
소프트웨어 세계는 완벽한 게 없기에 부딪히면서 리뷰하고 피드백주고 등등 부딪히는 것이 중요하다!
개발자로서 번아웃을 어떻게 대처하면 좋을까요?
체력을 키우고, 운동을 해야한다. 핵심은 운동(건강)
바쁜데 운동을 어떻게 할까? -> 자신의 시간 관리를 되돌아보자. 중요하지 않은 일에 집중하고 있을 수 있다.
주기적으로 곰곰히 생각해보면서 이것이 정말 중요한 일인가? 등 정리하는 시간을 가져야 한다 -> 산책
본인이 하고 싶은 업무와 회사에서 하는 업무가 다를 수 있는데 어떤 자세로 받아드려야 할까요?
간접 경험을 통해 성장해야 한다.
우리의 인생을 변화시키는 것은 직접 변화의 대응보다 간접 변화에 대응하는 것이 훨씬 중요하다.
인생은 선택하지 않은 일들을 열심히 할수록 잘 풀리는 것 같다.
개발 또한 내가 고른 것의 일부이고, 고르지 않은 것에 열심히 할수록 성과가 결정된다.
경험 상 내가 하고싶은 것을 선택해서 하더라도 잘 되지는 않았던 것 같다.
팀 또는 동료들에게 좋은 영향을 끼쳐 다 같이 좋은 개발자가 될 수 있는 방안이 있을까요?
위에서 언급한 7가지 역량(생산성, 책임감, 협업, 지식, 안정성, 좋은 코드, 설계)가 중요하다.
실질적으로는 어떻게 하면 잘 할 수 있을지에 대한 가이드도 필요하다.
조직 외 네트워크, 리소스 활용을 위해서는 어떠한 활동이 좋을까요?
토론, 확장, 리뷰
스스로 어떤 기준과 목표를 염두에 두고 설계하는 게 커리어를 이루는 데 도움이 될까요?
G(Goal), P(Plan), A(Action), M(Mesaure) -> APAM을 생각하자.
목표를 정하고, 계획을 짜고, 행동하고, 평가를 취한다
APAM은 보다 작고 빠르게 정해야함 -> 작은 목표, 작은 계획, 작은 실행, 작은 평과 등
CS 기초가 탄탄했을 때 큰 힘이 되었던 경험이 있으신가요?
CPU, Memory 등을 파악할 때 더 좋은 소프트웨어를 만들 수 있게 되더라.
