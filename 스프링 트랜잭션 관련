https://velog.io/@kdhyo/JavaTransactional-Annotation-%EC%95%8C%EA%B3%A0-%EC%93%B0%EC%9E%90-26her30h

------------- GPT
스프링에서 트랜잭션 어노테이션은 데이터베이스 또는 다른 영속성 저장소에서 데이터를 조작할 때 일관성과 안전성을 유지하기 위해 사용됩니다. 트랜잭션은 여러 개의 데이터 조작 작업을 하나의 논리적인 작업 단위로 묶어서 원자성, 일관성, 독립성, 지속성 (ACID)을 보장하는 데 도움을 줍니다.

트랜잭션 어노테이션은 다양한 상황에서 사용될 수 있습니다. 일반적으로 데이터 조작 작업 (데이터의 생성, 수정, 삭제)이 포함된 메서드에 트랜잭션 어노테이션을 적용합니다. 주요 상황은 다음과 같습니다:

서비스 메서드: 비즈니스 로직을 처리하는 서비스 계층의 메서드에 트랜잭션 어노테이션을 적용합니다. 서비스 메서드는 여러 개의 데이터 조작 작업을 수행하거나 다른 리포지토리 메서드를 호출하여 데이터를 변경하는 역할을 합니다. 트랜잭션 어노테이션을 사용하여 이러한 작업들을 하나의 트랜잭션으로 묶을 수 있습니다.

리포지토리 메서드: 데이터베이스와 상호작용하는 리포지토리 (데이터 액세스 계층)의 메서드에 트랜잭션 어노테이션을 적용합니다. 데이터의 조회, 저장, 수정, 삭제 등의 작업을 수행하는 메서드에서 트랜잭션 어노테이션을 사용하여 데이터 조작의 원자성과 일관성을 보장할 수 있습니다.

컨트롤러 메서드: 웹 애플리케이션의 컨트롤러 메서드에서 트랜잭션 어노테이션을 사용할 수도 있습니다. 예를 들어, 여러 개의 서비스 메서드를 호출하여 하나의 요청을 처리하거나, 데이터 조작 작업과 함께 비즈니스 로직을 처리하는 경우 트랜잭션 어노테이션을 컨트롤러 메서드에 적용하여 트랜잭션 범위를 설정할 수 있습니다.

트랜잭션 어노테이션은 주로 @Transactional 어노테이션을 사용합니다. 스프링은 @Transactional 어노테이션이 적용된 메서드나 클래스를 프록시로 감싸서 트랜잭션을 시작하고 종료할 수 있는 기능을 제공합니다. @Transactional 어노테이션은 다양한 속성을 설정하여 트랜잭션의 동작 방식을 조정할 수 있습니다.

트랜잭션 어노테이션을 사용하여 데이터 조작 작업을 트랜잭션 단위로 묶으면 데이터의 일관성과 안전성을 보장할 수 있습니다. 또한 예외가 발생했을 때 롤백 처리를 자동으로 수행하여 데이터의 일관성을 유지할 수 있습니다.

-------- GPT
트랜잭션 어노테이션을 적용하지 않은 경우와 적용한 경우의 차이는 다음과 같습니다:

트랜잭션 범위:

적용하지 않은 경우: 메서드 내에서 데이터베이스 작업이 각각 개별적인 트랜잭션 범위로 처리됩니다. 즉, 각 데이터베이스 작업은 개별적으로 커밋 또는 롤백됩니다.
적용한 경우: 메서드 내에서 수행되는 모든 데이터베이스 작업은 하나의 트랜잭션 범위 내에서 실행됩니다. 모든 작업이 성공하면 커밋되고, 작업 중 하나라도 실패하면 롤백됩니다.
ACID 속성:

적용하지 않은 경우: 각 데이터베이스 작업은 개별적으로 커밋되거나 롤백되므로, 원자성(Atomicity), 일관성(Consistency), 고립성(Isolation), 지속성(Durability) 속성을 보장하기 어려울 수 있습니다. 하나의 작업이 실패하더라도 이전 작업이 이미 커밋되어 영구적으로 반영된 상태일 수 있습니다.
적용한 경우: 모든 데이터베이스 작업이 트랜잭션 범위 내에서 실행되므로 ACID 속성을 보장할 수 있습니다. 모든 작업이 성공적으로 완료되거나 전체적으로 롤백되어 일관성 있는 상태를 유지합니다.
동시성 제어:

적용하지 않은 경우: 여러 스레드 또는 동시 요청에서 동일한 데이터를 동시에 수정하는 경우 데이터 일관성 문제가 발생할 수 있습니다. 동시에 실행되는 작업들이 서로 영향을 주거나 충돌할 수 있습니다.
적용한 경우: 트랜잭션 범위 내에서 동시 요청이 충돌하지 않고 순차적으로 실행됩니다. 트랜잭션 격리 수준 설정을 통해 동시성 제어를 조정할 수 있습니다.
롤백 및 복구:

적용하지 않은 경우: 작업 중 하나가 실패하면 그 작업만 롤백될 뿐이며, 이전 작업은 이미 커밋되어 데이터베이스에 반영된 상태입니다. 실패한 작업을 복구하려면 추가적인 로직이 필요합니다.
적용한 경우: 작업 중 하나가 실패하면 전체 작업이 롤백되어 이전 상태로 복구됩니다. 롤백을 통해 데이터 일관성과 무결성을 유지할 수 있습니다.
즉, 트랜잭션 어노테이션을 적용하면 데이터 작업이 원자적으로 처리되어 ACID 속성을 준수하고, 동시성 문제를 예방하며, 롤백과 복구를 통해 데이터 일관성을 유지할 수 있습니다. 트랜잭션을 적용하지 않은 경우에는 이러한 보장되는 트랜잭션적인 특성들을 놓치게 됩니다.
